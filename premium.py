import logging
from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_USER_ID

bot = None  # –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ bot.py

class PaymentForm(StatesGroup):
    waiting_for_receipt = State()

async def start_payment(message: Message, state: FSMContext):
    await message.answer(
        "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ (—Ñ–æ—Ç–æ, —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ç–µ–∫—Å—Ç), –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à—É –æ–ø–ª–∞—Ç—É."
    )
    await state.set_state(PaymentForm.waiting_for_receipt)

async def receive_receipt(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ –Ω–∏–∫–∞"

    await bot.forward_message(
        chat_id=ADMIN_USER_ID,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
        ]
    ])

    sent = await bot.send_message(
        ADMIN_USER_ID,
        f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø</b> –æ—Ç @{username} (ID: <code>{user_id}</code>)",
        reply_markup=kb
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ
    bot._admin_msg = sent.message_id
    await message.answer("üì§ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

async def handle_admin_decision(callback: CallbackQuery):
    action, user_id = callback.data.split(":")
    user_id = int(user_id)

    if action == "approve":
        user_text = (
            "üéâ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø üíé\n"
            "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É.\n\n"
            "üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É: https://t.me/your_private_group\n"
            "(–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é)\n\n"
            "üìå –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!"
        )
        admin_text = "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
    else:
        user_text = "üö´ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π."
        admin_text = "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"

    try:
        await bot.send_message(chat_id=user_id, text=user_text)
        await bot.edit_message_text(
            chat_id=ADMIN_USER_ID,
            message_id=bot._admin_msg,
            text=f"–°—Ç–∞—Ç—É—Å: {admin_text}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        return

    await callback.answer("–ì–æ—Ç–æ–≤–æ.")

def register_premium_handlers(dp, bot_instance):
    global bot
    bot = bot_instance
    dp.message.register(start_payment, F.text == "/pay")
    dp.message.register(receive_receipt, PaymentForm.waiting_for_receipt)
    dp.callback_query.register(handle_admin_decision, F.data.startswith("approve:") | F.data.startswith("reject:"))
